<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on rench&#39;s blog</title>
    <link>https://rench1988.github.io/tags/network/</link>
    <description>Recent content in Network on rench&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>finyren@example.com (rench)</managingEditor>
    <webMaster>finyren@example.com (rench)</webMaster>
    <copyright>(c) 2015 rench.</copyright>
    <lastBuildDate>Tue, 10 Dec 2019 09:39:14 +0800</lastBuildDate>
    
	<atom:link href="https://rench1988.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dns Srv Record</title>
      <link>https://rench1988.github.io/2019/12/10/dns-srv-record/</link>
      <pubDate>Tue, 10 Dec 2019 09:39:14 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/12/10/dns-srv-record/</guid>
      <description>srv record srv record是用于发现网络上指定服务的dns record, 比如网络电话使用srv record指定SIP服务的地址.
srv record里面的域名通常定义了一个符号名和传输协议, srv record里面还包含优先级, 权重, 端口, 服务目的地址.
以下是两条srv记录的例子
&amp;gt; _sip._tcp.example.com. 3600 IN SRV 10 60 5060 bigbox.example.com. &amp;gt; _sip._tcp.example.com. 3600 IN SRV 10 20 5060 smallbox1.example.com.
_sip是符号名, _tcp是传输协议, 符号名和传输协议通常以下划线开头.
两条记录的优先级都是10, 第一条记录的权重是60, 第二条记录的权重是20. 优先级和权重决定了选择策略.
最后的两个字段定义了端口和服务地址.</description>
    </item>
    
    <item>
      <title>Nat设备的类型</title>
      <link>https://rench1988.github.io/2019/12/05/nat%E8%AE%BE%E5%A4%87%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 05 Dec 2019 10:43:30 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/12/05/nat%E8%AE%BE%E5%A4%87%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>假设有一个客户端(位于nat设备之后), 两个公网服务端。他们对应的地址分别为:
客户端私网地址(192.168.1.99)
客户端nat公网地址(1.1.1.1)
服务器A公网地址(2.2.2.2)
服务器B公网地址(3.3.3.3)
1. 全纺锤型(Full cone NAT) 设客户端往服务器A发送数据包
192.168.1.99:11111 =&amp;gt; 2.2.2.2:22222
nat设备中会记录类似如下的映射关系:
192.168.1.99:11111 &amp;lt;=&amp;gt; 1.1.1.1:11112
nat设备同时纪录类似如下的入向过滤列表:
(1.1.1.1, 11112, *, *)
入包只要是发往1.1.1.1:11112, nat设备就会为其转发(不论入包的源地址和端口是啥).
2. 地址受限型(Restricted Cone NAT) 同全纺锤型的例子, 只是nat设备记录的入向过滤列表为:
(1.1.1.1, 11112, 2.2.2.2, *)
入包被放行的条件是入包的目的地址端口是1.1.1.1:11112且入包的源地址是2.2.2.2
3. 地址端口受限型(Port Restricted Cone NAT) 同全纺锤型的例子, 只是nat设备记录的入向过滤列表为
(1.1.1.1, 11112, 2.2.2.2, 22222)
入包被放行的条件是入包的目的地址端口是1.1.1.1:11112且源地址是2.2.2.2, 源端口是22222
假设此时客户端使用同样的地址端口对向服务器B发数据包
192.168.1.99:11111 =&amp;gt; 3.3.3.3:33333
nat设备中会记录类似如下的映射关系:
192.168.1.99:11111 &amp;lt;=&amp;gt; 1.1.1.1:11112
这个特点是，当源客户主机使用相同的IP、端口号时，NAT通常也会使用相同的IP、端口号予以映射, 入向过滤列表为:
(1.1.1.1, 11112, 2.2.2.2, 22222)
(1.1.1.1, 11112, 3.3.3.3, 33333)
4. 对称型(Symmetric NAT) 同地址端口受限型的例子, 只是当客户端使用同样的地址端口对向服务器B发数据包时</description>
    </item>
    
  </channel>
</rss>