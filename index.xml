<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rench&#39;s blog</title>
    <link>https://rench1988.github.io/</link>
    <description>Recent content on rench&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>finyren@example.com (rench)</managingEditor>
    <webMaster>finyren@example.com (rench)</webMaster>
    <copyright>(c) 2015 rench.</copyright>
    <lastBuildDate>Mon, 25 Feb 2019 15:29:00 +0800</lastBuildDate>
    
	<atom:link href="https://rench1988.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lte ip address allocation</title>
      <link>https://rench1988.github.io/2019/02/25/lte-ip-address-allocation/</link>
      <pubDate>Mon, 25 Feb 2019 15:29:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/02/25/lte-ip-address-allocation/</guid>
      <description> 翻译原文地址
这篇文档讨论isp怎么分配ip地址给ue, ip地址分配可以分为动态ip地址分配和静态ip地址分配,这篇文档会讨论这两种地址分配的机制以及它们的的异同.
内容  介绍 ip地址分配的类型 动态ip地址分配 静态ip地址分配 总结  1.介绍 lte网络都是基于ip的网络, 用户的数据包都是通过ip数据包来传送的. 当ue加入lte网络的时候,一个PDN(Packet Data Network)地址(该地址仅在该pdn里面使用)会分配给ue, 同时该ue会建立一个默认的承载(ue和pgw之间), 该默认承载和ip地址会一直保持有效, 直到ue从lte网络detach.(这里可以理解为ip地址属于默认承载的一部分?).
ue可能会同时有多个apn, 每个apn会建立一个默认承载和分配一个ip地址, ip地址可以分为ipv4, ipv6, ipv4/ipv6.
2.ip地址分配的类型 3.动态ip地址分配 4.静态ip地址分配 5.总结 </description>
    </item>
    
    <item>
      <title>lte tunnel</title>
      <link>https://rench1988.github.io/2019/01/31/lte-tunnel/</link>
      <pubDate>Thu, 31 Jan 2019 10:42:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/01/31/lte-tunnel/</guid>
      <description>从ue发出的ip数据包, 无论其目的地址是什么, 该ip数据包都要封装在gtp tunnel里面, 然后由eNB发往pgw, 如下面的图(a)
1. UE to eNB 假设ue往google服务器74.125.71.104发包, 该数据包先通过radio link发往eNB,从ue发出的原始数据包如下所示: 2. eNB to S-GW eNB收到从ue发来的数据包后, 往该数据包ip header前面添加一个gtp tunnel header, 该gtp tunnel header包含3个独立的头部(gtp header, udp header, ip header for GTP tunneling). 从eNB到S-GW的数据包如下所示: 由于前面gtp tunnel header的存在, 路由就能根据外部的ip头部把包发往指定的sgw
3. S-GW to PGW S-GW收到eNB的数据包后, 修改外部的gtp tunnel header, 修改后的数据包如下所示: 4. P-GW to PDN (www.google.com) P-GW收到数据包后, 剥离外部的gtp tunnel header, 把数据包发往internet, 如下所示:
gtp tunnel header中teid的解释 由于同时会有很多个ue与sgw和pgw建立联系, 那么就会同时存在很多个gtp tunnel(每个ue可以有多个tunnel), teid就是用于标识这个tunnel是属于哪个ue的. 如图b里面标识的, 关于某个ue的从eNB到sgw的uplink tunnel通过TEID = UL S1-TEID (ex.</description>
    </item>
    
    <item>
      <title>golang article</title>
      <link>https://rench1988.github.io/2018/11/20/golang-article/</link>
      <pubDate>Tue, 20 Nov 2018 17:26:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2018/11/20/golang-article/</guid>
      <description>Go Data Structures: Interfaces laws-of-reflection</description>
    </item>
    
  </channel>
</rss>