<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on rench&#39;s blog</title>
    <link>https://rench1988.github.io/post/</link>
    <description>Recent content in Posts on rench&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>finyren@example.com (rench)</managingEditor>
    <webMaster>finyren@example.com (rench)</webMaster>
    <copyright>(c) 2015 rench.</copyright>
    <lastBuildDate>Mon, 25 Feb 2019 15:29:00 +0800</lastBuildDate>
    
	<atom:link href="https://rench1988.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lte ip address allocation</title>
      <link>https://rench1988.github.io/2019/02/25/lte-ip-address-allocation/</link>
      <pubDate>Mon, 25 Feb 2019 15:29:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/02/25/lte-ip-address-allocation/</guid>
      <description>翻译原文地址
这篇文档讨论isp怎么分配ip地址给ue, ip地址分配可以分为动态ip地址分配和静态ip地址分配,这篇文档会讨论这两种地址分配的机制以及它们的的异同.
内容  介绍 ip地址分配的类型 动态ip地址分配 静态ip地址分配  1.介绍 lte网络都是基于ip的网络, 用户的数据包都是通过ip数据包来传送的. 当ue加入lte网络的时候,一个PDN(Packet Data Network)地址(该地址仅在该pdn里面使用)会分配给ue, 同时该ue会建立一个默认的承载(ue和pgw之间), 该默认承载和ip地址会一直保持有效, 直到ue从lte网络detach.(这里可以理解为ip地址属于默认承载的一部分?).
ue可能会同时有多个apn, 每个apn会建立一个默认承载和分配一个ip地址, ip地址可以分为ipv4, ipv6, ipv4/ipv6.
2.ip地址分配的类型 当ue初始附着lte网络时,会请求一个pdn连接. pgw会为ue分配一个ip地址, 通过这个ip地址, ue可以使用pdn提供的数据服务.
pgw分配ip地址有两种方式(静态ip地址分配和动态ip地址分配). 动态ip地址分配是在ue接入网络的时候, pgw自动分配一个ip地址给ue(每次分配的不一样). 静态ip地址分配的时候, pgw会根据ue选择指定的ip地址分配(每次分配的相同). 图1比较了这两种不同的类型.
图1. IP Address Allocation Schemes
在动态ip地址分配的情况下, ue每次附着都会获取到不同的ip地址. pgw有一个ip地址池, ue每次附着的时候都会自动选一个地址分配出去.
在静态ip地址分配的情况下, ue的ip地址已经写入了hss, 所以每次分配的都是同一个ip地址.
3.动态ip地址分配 动态ip地址分配会保留一个地址池, 在ue初始附着的时候动态分配一个地址给ue.如图2.
图2. Procedure for Dynamic IP Address Allocation
在pgw里面, ip地址池以及dns服务器地址都已经配置好了.
PGW
IP Pool: 1.1.0.0/16 (1.1.1.1 ~ 1.1.255.254)
DNS server IP address: Primary DNS: 10.</description>
    </item>
    
    <item>
      <title>lte tunnel</title>
      <link>https://rench1988.github.io/2019/01/31/lte-tunnel/</link>
      <pubDate>Thu, 31 Jan 2019 10:42:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2019/01/31/lte-tunnel/</guid>
      <description>从ue发出的ip数据包, 无论其目的地址是什么, 该ip数据包都要封装在gtp tunnel里面, 然后由eNB发往pgw, 如下面的图(a)
1. UE to eNB 假设ue往google服务器74.125.71.104发包, 该数据包先通过radio link发往eNB,从ue发出的原始数据包如下所示: 2. eNB to S-GW eNB收到从ue发来的数据包后, 往该数据包ip header前面添加一个gtp tunnel header, 该gtp tunnel header包含3个独立的头部(gtp header, udp header, ip header for GTP tunneling). 从eNB到S-GW的数据包如下所示: 由于前面gtp tunnel header的存在, 路由就能根据外部的ip头部把包发往指定的sgw
3. S-GW to PGW S-GW收到eNB的数据包后, 修改外部的gtp tunnel header, 修改后的数据包如下所示: 4. P-GW to PDN (www.google.com) P-GW收到数据包后, 剥离外部的gtp tunnel header, 把数据包发往internet, 如下所示:
gtp tunnel header中teid的解释 由于同时会有很多个ue与sgw和pgw建立联系, 那么就会同时存在很多个gtp tunnel(每个ue可以有多个tunnel), teid就是用于标识这个tunnel是属于哪个ue的. 如图b里面标识的, 关于某个ue的从eNB到sgw的uplink tunnel通过TEID = UL S1-TEID (ex.</description>
    </item>
    
    <item>
      <title>golang article</title>
      <link>https://rench1988.github.io/2018/11/20/golang-article/</link>
      <pubDate>Tue, 20 Nov 2018 17:26:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2018/11/20/golang-article/</guid>
      <description>Go Data Structures: Interfaces laws-of-reflection</description>
    </item>
    
    <item>
      <title>libpcap中snapshot length的作用</title>
      <link>https://rench1988.github.io/2018/11/20/libpcap%E4%B8%ADsnapshot-length%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 20 Nov 2018 17:26:00 +0800</pubDate>
      <author>finyren@example.com (rench)</author>
      <guid>https://rench1988.github.io/2018/11/20/libpcap%E4%B8%ADsnapshot-length%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>在用libpcap capture packet时, os会分配一个&amp;raquo;os buffer&amp;raquo;来保存接收的包, 该&amp;raquo;os buffer&amp;raquo;是由固定大小的slot组成的. 该&amp;raquo;os buffer&amp;raquo;的默认大小是2M, 如果将snapshot length的大小设置为65535, 则slot的大小就是32(65535 * 32 = 2M). 如果包到达速度非常快, 而包处理函数比较慢, 就会造成slot占满, 就会造成丢包.
将snapshot length的大小调小, 就会有更多的slot, 能缓存更多的包.</description>
    </item>
    
  </channel>
</rss>